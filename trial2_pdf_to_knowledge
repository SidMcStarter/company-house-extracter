# pdf_qa_with_hf_layoutlm.py

import fitz  # PyMuPDF
from PIL import Image
from transformers import pipeline
import os
import torch

def answer_question_from_pdf_with_layoutlm(pdf_path, question):
    """
    Uses the microsoft/layoutlmv3-base model to answer a question
    by analyzing the pages of a PDF directly.
    """
    print("Loading LayoutLMv3 model from Hugging Face...")
    # This will download the model (~950MB) on the first run.
    # It requires the Tesseract OCR engine to be installed on your system.
    doc_qa_pipeline = pipeline(
        "document-question-answering",
        model="impira/layoutlm-document-qa"
    )
    print("Model loaded.")

    doc = fitz.open(pdf_path)
    total_pages = len(doc)
    print(f"PDF has {total_pages} pages. Analyzing document...")

    all_answers = []
    for page_num in range(total_pages):
        print(f"  Analyzing page {page_num + 1}/{total_pages}...")
        page = doc.load_page(page_num)

        # Convert the PDF page to a PIL Image
        pix = page.get_pixmap(dpi=200)
        image = Image.frombytes("RGB", [pix.width, pix.height], pix.samples)

        # Run the pipeline on the image of the page
        try:
            results = doc_qa_pipeline(image=image, question=question)
            all_answers.extend(results)
        except Exception as e:
            print(f"    Could not process page {page_num + 1}: {e}")

    doc.close()

    # Find the best answer from all the collected results
    if all_answers:
        best_answer = sorted(all_answers, key=lambda x: x['score'], reverse=True)[0]
        return best_answer
    else:
        return None

# --- Main Script Execution ---

pdf_path = "/Users/siddharthdileep/extracter/01471587/AA_MzA0MTYzNDYxN2FkaXF6a2N4-pages.pdf"
user_question = input("Enter your question about the document: ")

answer_data = answer_question_from_pdf_with_layoutlm(pdf_path, user_question)

if answer_data:
    print("\n--- Answer Found ---")
    print(f"Answer: {answer_data['answer']}")
    print(f"Confidence Score: {answer_data['score']:.4f}")
else:
    print("\nSorry, I could not find an answer in the document.")